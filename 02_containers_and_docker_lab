1. NGINX Server Container

In this task, we will run a simple NGINX server in a Docker container. The server only returns some server information:

Task - 1:

To create a NGINX server container, we shall first pull the NGINX server image from Docker Hub. You can find the image
documentation on Docker Hub here: https://hub.docker.com/r/nginxdemos/hello. You can always refer to the documentation
to get instructions on how to pull, build and run the image:

Open a CLI, for example, PowerShell or Windows Terminal or Command Prompt (PowerShell is recommended), and let's first
pull the Docker image of the server. You should just use the pull command from the documentation:

========================
Command:

docker pull nginxdemos/hello - create a new image in the docker as used the noted nginxdemos/hello
docker images - shows all images which the docker includes

Task - 2:

Now we want to run a container with the NGINX server image, which is already downloaded from Docker Hub to our local
machine. Use the docker run command and try this way:

========================
Command:

1) docker run nginxdemos/hello - this one runs a container but without name and other details which are needed. Also
this one shows the logs in real time and we need to open a second CMD to use new processes.

2) docker run -p 5000:80 nginxdemos/hello - runs container but this time includes the port which can be used for the
image.

3) docker run -p 5000:80 -d nginxdemos/hello - runs container but -d give us a chance to not continue use the same CMD

4) docker run -p 5000:80 -d --name sakeeE nginxdemos/hello - now we have name includes (sakeeE)

Task - 3:

Examine and Delete Container and Image
We can see all containers we have like this:

========================
Command:

docker ps -a - shows all containers
docker ps - shows only running containers

In our case, we have a single running container and we have the same output from the two commands.
Now let's use the terminal to stop and delete our container. Use the following commands with the container id or
container name:

========================
Command:

docker stop sakeeE - this command stop our running container
docker rm sakeeE - delete the container

Both commands return the id or the name of the container.
Finally, we can also delete the NGINX server image:

========================
Command:

docker rmi nginxdemos/hello - remove image (rmi)



2. Vue.js App in Container

Now we will see how to run a Vue.js app in a Docker container. We will create an app just for the demo.
Create and Set Up a Vue.js App
Let's use Terminal to create an app called MyWebsite, in a folder you choose:

========================
Command:

npm install -g @vue/cli - install the vue package
vue init browserify MyWebsite - create a new folder
cd MyWebsite
docker pull node:16

Now let's run the application locally in the standard way to check if everything works as expected:

========================
Command:

npm run dev

Now we should modify the app's package.json file, so that the app runs on the IP we want. Open the file in any editor
and change the scripts section settings like this:
Run the App in a Container
To run the Vue.js app in a container, we will need to create a container with an exposed port, a volume and an
interactive shell, so that we can run the app inside the container with the docker run command.

========================
Command:

docker run -it -p 8080:8080 -v %cd%:/app -w /app node:16 npm run serve - this will run our app

3. MongoDB in Container

Our next task is to run a container with a Mongo database in it. To do this, we will need the following image from Docker Hub: https://hub.docker.com/_/mongo
You can look at the "How to use this Image" section to learn how to run the database container. However, we will also show and explain the process step by step.
Create the Container
First, pull the latest MongoDB image with the docker pull mongo command:

========================
Command:

docker pull mongo - create image for mongo

Our next step is to run the container, using the following command:

•	docker run → starts a new Docker container;
•	-p 27017:27017 → sets the external and internal ports to 27017, so that we can access the MongoDB from outside the container;
•	-v ${PWD}/data:/etc/mongo
o	${PWD} → the host directory;
o	/etc/mongo → the container directory;
•	-d → runs the container in detached mode (it will run in the background);
•	-e MONGO_INITDB_ROOT_USERNAME=mongoadmin → sets the admin username;
•	-e MONGO_INITDB_ROOT_PASSWORD=mongoadminpass → sets the admin password;
•	mongo → specifies the image.
You should disable host's MongoDB Server instances or use another port!
Admin password should always follow the rules from the documentation.
When MongoDB Server container is started, other apps can log in to it and use the database.

========================
Command:

docker run -d -p 27017:27017 -v "%cd%/data /data/db" -e MONGO_INITDB_ROOT_USERNAME=mongoadmin -e /
MONGO_INITDB_ROOT_PASSWORD=mongoadminpass mongo - add all details when we run the container

Run a Database Container with Volume
To persist data after container is stopped, create a volume, using the following command:

========================
Command:

docker run ^
More? -p 27017:27017 ^
More? -v data:/etc/mongo ^
More? -d ^
More? -e MONGO_INITDB_ROOT_USERNAME=mongoadmin ^
More? -e MONGO_INITDB_ROOT_PASSWORD=mongoadminpass ^
More? mongo - add volume